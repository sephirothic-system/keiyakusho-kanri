// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  ownedContracts Contract[]  @relation("ContractOwner")
  userGroups     UserGroup[]

  @@map("users")
}

// グループモデル
model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  userGroups      UserGroup[]
  directoryAccess DirectoryAccess[]

  @@map("groups")
}

// ユーザーとグループの多対多関係
model UserGroup {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())

  // リレーション
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

// ディレクトリモデル（階層構造対応）
model Directory {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String? // 親ディレクトリID（NULL = ルートディレクトリ）
  path        String   @unique // 階層パス（例: /root/contracts/legal）
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  parent          Directory?        @relation("DirectoryHierarchy", fields: [parentId], references: [id])
  children        Directory[]       @relation("DirectoryHierarchy")
  contracts       Contract[]
  directoryAccess DirectoryAccess[]

  @@unique([parentId, name]) // 同じ親ディレクトリ内で同名不可
  @@map("directories")
}

// ディレクトリへのグループアクセス権限
model DirectoryAccess {
  id          String     @id @default(cuid())
  directoryId String
  groupId     String
  permission  Permission @default(READ)
  createdAt   DateTime   @default(now())

  // リレーション
  directory Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([directoryId, groupId])
  @@map("directory_access")
}

// 権限の種類
enum Permission {
  READ // 読み取り専用
  WRITE // 読み書き可能
}

// 契約書モデル
model Contract {
  id             String         @id @default(cuid())
  title          String
  content        String // Markdownコンテンツ
  status         ContractStatus @default(DRAFT)
  contractNumber String?        @unique // 契約書番号

  // 契約期間
  startDate DateTime?
  endDate   DateTime?

  // メタデータ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // オーナー（作成者）
  ownerId String
  owner   User   @relation("ContractOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // ディレクトリ配置
  directoryId String
  directory   Directory @relation(fields: [directoryId], references: [id])

  // 契約書のカテゴリ
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // 契約書のバージョン履歴
  versions ContractVersion[]

  @@index([directoryId])
  @@index([ownerId])
  @@index([status])
  @@map("contracts")
}

// 契約書のステータス
enum ContractStatus {
  DRAFT // 下書き
  REVIEW // レビュー中
  ACTIVE // 有効
  EXPIRED // 期限切れ
  TERMINATED // 終了
}

// 契約書のカテゴリ
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String? // カテゴリの色
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  contracts Contract[]

  @@map("categories")
}

// 契約書のバージョン履歴
model ContractVersion {
  id         String   @id @default(cuid())
  version    Int // バージョン番号
  title      String
  content    String // その時点でのMarkdownコンテンツ
  changeNote String? // 変更点のメモ
  createdAt  DateTime @default(now())

  // リレーション
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, version])
  @@index([contractId])
  @@map("contract_versions")
}

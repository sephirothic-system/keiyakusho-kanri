generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String?
  password       String?
  emailVerified  DateTime?
  image          String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  ownedContracts Contract[]  @relation("ContractOwner")
  userGroups     UserGroup[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Group {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  directoryAccess DirectoryAccess[]
  userGroups      UserGroup[]

  @@map("groups")
}

model UserGroup {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model Directory {
  id              String            @id @default(cuid())
  name            String
  description     String?
  parentId        String?
  path            String            @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  contracts       Contract[]
  parent          Directory?        @relation("DirectoryHierarchy", fields: [parentId], references: [id])
  children        Directory[]       @relation("DirectoryHierarchy")
  directoryAccess DirectoryAccess[]

  @@unique([parentId, name])
  @@map("directories")
}

model DirectoryAccess {
  id          String     @id @default(cuid())
  directoryId String
  groupId     String
  permission  Permission @default(READ)
  createdAt   DateTime   @default(now())
  directory   Directory  @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  group       Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([directoryId, groupId])
  @@map("directory_access")
}

model Contract {
  id             String            @id @default(cuid())
  title          String
  content        String
  status         ContractStatus    @default(DRAFT)
  contractNumber String?           @unique
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  ownerId        String
  directoryId    String
  categoryId     String?
  versions       ContractVersion[]
  category       Category?         @relation(fields: [categoryId], references: [id])
  directory      Directory         @relation(fields: [directoryId], references: [id])
  owner          User              @relation("ContractOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([directoryId])
  @@index([ownerId])
  @@index([status])
  @@map("contracts")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contracts Contract[]

  @@map("categories")
}

model ContractVersion {
  id         String   @id @default(cuid())
  version    Int
  title      String
  content    String
  changeNote String?
  createdAt  DateTime @default(now())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, version])
  @@index([contractId])
  @@map("contract_versions")
}

enum Permission {
  READ
  WRITE
}

enum ContractStatus {
  DRAFT
  REVIEW
  ACTIVE
  EXPIRED
  TERMINATED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

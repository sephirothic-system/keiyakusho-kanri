---
description: 
globs: 
alwaysApply: true
---
## 概要

契約書管理サービス
OSSとして公開する

## Backend

- next.js
- typescript
- prisma
- serverside
- postgresql

## Frontend

- next.js
- typescript
- shadcn
- tailwindcss

## Testing

### テストツール構成
- **単体テスト**: Vitest + React Testing Library
- **E2Eテスト**: Playwright (Chrome, Firefox, Safari)
- **型チェック**: TypeScript strict mode
- **Lint/Format**: ESLint + Prettier (pre-commit hook)

### テスト戦略
- **単体テスト**: コンポーネント、hooks、ユーティリティ関数
- **統合テスト**: API routes + Prisma (データベース連携)
- **E2Eテスト**: ユーザーフロー全体の動作確認

### 重要なテスト観点（契約書管理の特性）
- **データ整合性**: 契約書の作成・更新・削除が正しく行われる
- **セキュリティ**: 認証・認可、データの漏洩防止
- **バージョン管理**: 契約書の履歴管理が正しく動作する
- **ファイル処理**: 添付ファイルのアップロード・ダウンロード
- **検索・フィルタ**: 契約書の検索機能の精度

### テストファイル構成
```
test/
├── utils.test.ts           # ユーティリティ関数
├── components/             # コンポーネントテスト
├── api/                    # API routes テスト
├── hooks/                  # カスタムフックテスト
└── e2e/                    # E2Eテスト
    ├── auth.spec.ts        # 認証フロー
    ├── contracts.spec.ts   # 契約書管理
    └── search.spec.ts      # 検索機能
```

### CI/CD
- GitHub Actions で全テスト自動実行
- プルリクエスト時の必須チェック
- カバレッジレポート生成（目標: 80%以上）

### 開発ルール（必須）
- **新機能実装時**: 必ずテストコードを同時に作成する
- **既存コード修正時**: 既存テストの更新 + 必要に応じて新規テスト追加
- **プルリクエスト**: テストコードなしでのマージ禁止
- **テストファーストアプローチ**: 可能な限りテストを先に書く（TDD）
- **テストカバレッジ**: 新規コードは必ず80%以上を維持
- **テスト実行**: コミット前に必ず `npm run test` を実行

### テスト作成の基本方針
- **1機能1テスト**: 機能ごとに対応するテストファイルを作成
- **エッジケース**: 正常系だけでなく異常系もテスト
- **モック**: 外部依存は適切にモック化
- **可読性**: テストコードも本番コードと同様に可読性を重視
- **保守性**: テストが壊れにくい設計を心がける

### テスト実行コマンド
- `npm run test` - 単体テスト実行
- `npm run test:e2e` - E2Eテスト実行  
- `npm run test:coverage` - カバレッジ付きテスト
- `npm run lint` - コード品質チェック
---
description: 
globs: 
alwaysApply: true
---
## 概要

契約書管理サービス
OSSとして公開する

## Backend

- next.js
- typescript
- prisma
- serverside
- postgresql

## Frontend

- next.js
- typescript
- shadcn
- tailwindcss

## Testing

### テストツール構成
- **単体テスト**: Vitest + React Testing Library
- **E2Eテスト**: Playwright (Chrome, Firefox, Safari)
- **型チェック**: TypeScript strict mode
- **Lint/Format**: ESLint + Prettier (pre-commit hook)

### テスト戦略
- **単体テスト**: コンポーネント、hooks、ユーティリティ関数
- **統合テスト**: API routes + Prisma (データベース連携)
- **E2Eテスト**: ユーザーフロー全体の動作確認

### 重要なテスト観点（契約書管理の特性）
- **データ整合性**: 契約書の作成・更新・削除が正しく行われる
- **セキュリティ**: 認証・認可、データの漏洩防止
- **バージョン管理**: 契約書の履歴管理が正しく動作する
- **ファイル処理**: 添付ファイルのアップロード・ダウンロード
- **検索・フィルタ**: 契約書の検索機能の精度

### テストファイル構成
```
test/
├── utils.test.ts           # ユーティリティ関数
├── components/             # コンポーネントテスト
├── api/                    # API routes テスト
├── hooks/                  # カスタムフックテスト
└── e2e/                    # E2Eテスト
    ├── auth.spec.ts        # 認証フロー
    ├── contracts.spec.ts   # 契約書管理
    └── search.spec.ts      # 検索機能
```

### CI/CD
- GitHub Actions で全テスト自動実行
- プルリクエスト時の必須チェック
- カバレッジレポート生成（目標: 80%以上）

### 開発ルール（必須）
- **新機能実装時**: 必ずテストコードを同時に作成する
- **既存コード修正時**: 既存テストの更新 + 必要に応じて新規テスト追加
- **プルリクエスト**: テストコードなしでのマージ禁止
- **テストファーストアプローチ**: 可能な限りテストを先に書く（TDD）
- **テストカバレッジ**: 新規コードは必ず80%以上を維持
- **テスト実行**: コミット前に必ず `npm run test` を実行

### テスト作成の基本方針
- **1機能1テスト**: 機能ごとに対応するテストファイルを作成
- **エッジケース**: 正常系だけでなく異常系もテスト
- **モック**: 外部依存は適切にモック化
- **可読性**: テストコードも本番コードと同様に可読性を重視
- **保守性**: テストが壊れにくい設計を心がける

### テスト実行コマンド
- `npm run test` - 単体テスト実行
- `npm run test:e2e` - E2Eテスト実行  
- `npm run test:coverage` - カバレッジ付きテスト
- `npm run lint` - コード品質チェック

## 開発ガイドライン

### コーディング規約
- **TypeScript**: strict mode を使用し、型安全性を重視
- **関数型プログラミング**: 可能な限り純粋関数とimmutableなデータ構造を使用
- **命名規則**: 意図が明確に伝わる変数名・関数名を使用
- **コメント**: コードで表現できない「なぜ」を説明する
- **単一責任の原則**: 1つの関数・コンポーネントは1つの責任のみ持つ

### アーキテクチャガイドライン
- **ディレクトリ構造**: 機能ごとにファイルを整理
- **コンポーネント設計**: 再利用可能で、疎結合なコンポーネントを作成
- **状態管理**: 必要最小限の状態管理を心がける
- **API設計**: RESTfulなAPI設計を基本とする
- **エラーハンドリング**: 適切なエラー処理とユーザーへの分かりやすいメッセージ

### 継続的改善ルール（重要）
- **ユーザーフィードバック活用**: ユーザーから指摘されたコーディングの改善点は、必ずこのbasic-rule.mdcに追記する
- **知識の蓄積**: 発見した重要な開発指針やベストプラクティスをドキュメント化する
- **ルールの更新**: プロジェクトの成長に合わせて開発ルールを継続的に見直し・更新する
- **学習の共有**: チーム全体で学んだ教訓を共有し、同じ過ちを繰り返さない
- **定期的な振り返り**: コードレビューや開発プロセスの改善点を定期的に議論する

### パフォーマンス・セキュリティ
- **パフォーマンス**: 不必要な再レンダリングや重い処理を避ける
- **セキュリティ**: 入力値の検証、SQLインジェクション対策、XSS対策を徹底
- **アクセシビリティ**: WCAG 2.1 AAレベルを目指したアクセシブルな実装
- **SEO**: 適切なメタタグとセマンティックなHTML構造

### コードレビュー指針
- **建設的なフィードバック**: 改善提案は具体的で実行可能な内容にする
- **学習機会**: レビューを通じてチーム全体のスキル向上を図る
- **品質基準**: 機能性だけでなく、保守性・可読性・テスタビリティも評価する
- **知識共有**: 良いコードパターンや設計判断の理由を共有する
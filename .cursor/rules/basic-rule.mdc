---
description: 
globs: 
alwaysApply: true
---
## 概要

契約書管理サービス
OSSとして公開する

## 技術スタック

### Backend

- **Framework**: Next.js
- **Language**: TypeScript
- **ORM**: Prisma
- **Database**: PostgreSQL
- **Architecture**: Serverside

### Frontend

- **Framework**: Next.js + React
- **Language**: TypeScript
- **UI Library**: shadcn/ui
- **Styling**: Tailwind CSS

## データベーススキーマ

`prisma/shcema.prisma`
を参照

## セットアップ手順

### 依存関係のインストール

```bash
npm install
```

### 環境変数の設定

`.env`ファイルを作成し、以下の内容を追加：

```env
# Database
DATABASE_URL="postgresql://keiyakusho:password123@localhost:5432/keiyakusho_db?schema=public"

# Next.js
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret-key-here"
```

### PostgreSQLの起動

```bash
docker-compose up -d
```

### データベースマイグレーション

```bash
# 初回のマイグレーション
npm run db:migrate

# Prisma Clientの生成
npm run db:generate
```

### 初期データの投入

```bash
npm run db:seed
```

### テスト環境の確認

```bash
# 単体テストの実行
npm run test

# E2Eテスト用ブラウザのインストール（初回のみ）
npx playwright install

# コードフォーマット
npm run format
```

### 開発サーバーの起動

```bash
npm run dev
```

## 利用可能なスクリプト

### データベース関連

- `npm run db:generate` - Prisma Clientの生成
- `npm run db:migrate` - マイグレーションの実行
- `npm run db:push` - スキーマをデータベースにプッシュ
- `npm run db:studio` - Prisma Studioの起動（データベースの可視化）
- `npm run db:seed` - 初期データの投入
- `npm run db:reset` - データベースのリセット

### テスト関連

- `npm run test` - 単体テストの実行
- `npm run test:watch` - 単体テストの監視モード
- `npm run test:coverage` - カバレッジ付きでテスト実行
- `npm run test:ui` - Vitestの UIモード
- `npm run test:e2e` - E2Eテストの実行
- `npm run test:e2e:ui` - E2EテストのUIモード
- `npm run test:e2e:headed` - ブラウザを表示してE2Eテスト実行

### コード品質

- `npm run lint` - ESLintの実行
- `npm run format` - Prettierでコードフォーマット
- `npm run format:check` - フォーマットチェック
- `npm run type-check` - TypeScriptの型チェック

### 開発

- `npm run dev` - 開発サーバーの起動
- `npm run build` - プロダクションビルド
- `npm run start` - プロダクションサーバーの起動

## Testing

### テストツール構成
- **単体テスト**: Vitest + React Testing Library
- **E2Eテスト**: Playwright (Chrome, Firefox, Safari)
- **型チェック**: TypeScript strict mode
- **Lint/Format**: ESLint + Prettier (pre-commit hook)

### テスト戦略
- **単体テスト**: コンポーネント、hooks、ユーティリティ関数
- **統合テスト**: API routes + Prisma (データベース連携)
- **E2Eテスト**: ユーザーフロー全体の動作確認

### 重要なテスト観点（契約書管理の特性）
- **データ整合性**: 契約書の作成・更新・削除が正しく行われる
- **セキュリティ**: 認証・認可、データの漏洩防止
- **バージョン管理**: 契約書の履歴管理が正しく動作する
- **ファイル処理**: 添付ファイルのアップロード・ダウンロード
- **検索・フィルタ**: 契約書の検索機能の精度

### テストファイル構成
```
test/
├── utils.test.ts           # ユーティリティ関数
├── components/             # コンポーネントテスト
├── api/                    # API routes テスト
├── hooks/                  # カスタムフックテスト
├── factories/              # テストファクトリーシステム
│   ├── index.ts           # 基本ファクトリー
│   ├── user.factory.ts    # ユーザーファクトリー
│   ├── contract.factory.ts # 契約書ファクトリー
│   └── all.ts             # ファクトリー統合
└── e2e/                    # E2Eテスト
    ├── auth.spec.ts        # 認証フロー
    ├── contracts.spec.ts   # 契約書管理
    └── search.spec.ts      # 検索機能
```

### CI/CD
- GitHub Actions で全テスト自動実行
- プルリクエスト時の必須チェック
- カバレッジレポート生成（目標: 80%以上）

### 開発ルール（必須）
- **新機能実装時**: 必ずテストコードを同時に作成する
- **既存コード修正時**: 既存テストの更新 + 必要に応じて新規テスト追加
- **プルリクエスト**: テストコードなしでのマージ禁止
- **テストファーストアプローチ**: 可能な限りテストを先に書く（TDD）
- **テストカバレッジ**: 新規コードは必ず80%以上を維持
- **テスト実行**: コミット前に必ず `npm run test` を実行

### テスト作成の基本方針
- **1機能1テスト**: 機能ごとに対応するテストファイルを作成
- **エッジケース**: 正常系だけでなく異常系もテスト
- **実際のデータベース使用**: PostgreSQLが用意されているため、モックより実際のDBを使用
- **可読性**: テストコードも本番コードと同様に可読性を重視
- **保守性**: テストが壊れにくい設計を心がける

### テストファクトリーシステム（重要）

#### 基本理念
- **Rails factory_bot**のような機能をTypeScript/Next.js/Prismaで実現
- **実際のデータベース**を使用した統合テスト
- **データ分離**によるテスト間の独立性確保
- **関連データの自動生成**による効率的なテストデータ作成

#### ファクトリーシステムの構成

```typescript
// 基本的な使用
import { factories, scenarios, TestDataCleaner } from './factories/all'

// 単体ファクトリー
const user = await factories.user.build()
const contract = await factories.contract.createNDA()

// シナリオベース
const { owner, contract } = await scenarios.setupPermissionTest()
const env = await scenarios.setupCompleteEnvironment()

// クリーンアップ
afterEach(async () => {
  await TestDataCleaner.cleanByPrefix('test')
})
```

#### 重要な実装パターン

1. **BaseFactoryクラス**による共通構造
   ```typescript
   export abstract class BaseFactory<T> {
     protected abstract defaultAttributes(): Partial<T>
     protected abstract create(attributes: Partial<T>): Promise<T>
     
     async build(overrides: Partial<T> = {}): Promise<T>
     async buildList(count: number, overrides: Partial<T> = {}): Promise<T[]>
   }
   ```

2. **関連データの自動生成**
   ```typescript
   // 契約書作成時にオーナー、ディレクトリ、カテゴリを自動生成
   protected async create(attributes: Partial<Contract>): Promise<Contract> {
     if (!attributes.ownerId) {
       const owner = await userFactory.build()
       attributes.ownerId = owner.id
     }
     // 以下同様...
   }
   ```

3. **プレフィックスベースのデータ分離**
   ```typescript
   // ランダムなプレフィックス付きデータ生成
   const faker = {
     string: (prefix = 'test', length = 8) => {
       // ランダム文字列生成でデータ競合を回避
     }
   }
   ```

4. **外部キー制約を考慮したクリーンアップ**
   ```typescript
   static async cleanByPrefix(prefix: string) {
     // 依存関係の順序でデータ削除
     await testPrisma.contractVersion.deleteMany({...})
     await testPrisma.contract.deleteMany({...})
     await testPrisma.directoryAccess.deleteMany({...})
     // ...
   }
   ```

#### テストシナリオヘルパー

- **setupPermissionTest()**: 権限テスト用の基本環境
- **setupCompleteEnvironment()**: 完全なテスト環境（ユーザー、グループ、権限設定等）
- **setupPerformanceTest()**: パフォーマンステスト用の大量データ

#### ファクトリーのベストプラクティス

1. **データの一意性**: ランダム値生成による制約違反の回避
2. **関連データの自動生成**: 必要に応じて関連オブジェクトを自動作成
3. **業務特化メソッド**: `createNDA()`, `createAdmin()`等の専用メソッド
4. **階層構造の考慮**: ディレクトリ等の親子関係を適切に処理
5. **テスト分離**: プレフィックスによるテストデータの分離

#### 学んだ重要な教訓

1. **モックより実DB**: PostgreSQLが利用可能な場合は実際のDBを使う方がテスト品質向上
2. **データベース制約**: 一意制約、外部キー制約を考慮したテストデータ設計
3. **テスト間分離**: 固定値ではなくランダム値でテスト間の競合を回避
4. **クリーンアップ戦略**: テスト後の確実なデータクリーンアップ
5. **シナリオ駆動**: 共通のテストパターンはシナリオヘルパーとして抽出

### 開発時の注意事項

1. `.env`ファイルは`.gitignore`に含まれているため、各環境で個別に作成
2. データベースの変更時は`npm run db:migrate`を実行
3. Prisma Studioで`npm run db:studio`を実行すると、ブラウザでデータベースの内容を確認可能
4. コミット前に`npm run test`と`npm run lint`を実行
5. Huskyによって、コミット時に自動的にlint-stagedが実行
6. E2Eテストを実行する前に、開発サーバーが起動していることを確認
7. **テストファクトリー**を使用してテストデータを作成し、テスト後は必ずクリーンアップ
8. **プレフィックス**を使用してテストデータを分離し、競合を回避

### トラブルシューティング

#### データベース接続エラー

1. PostgreSQLが起動しているか確認：`docker-compose ps`
2. 環境変数が正しく設定されているか確認
3. データベース名・ユーザー名・パスワードが正しいか確認

#### マイグレーションエラー

1. 既存のマイグレーションファイルを削除：`rm -rf prisma/migrations`
2. データベースをリセット：`npm run db:reset`
3. 新しいマイグレーションを作成：`npm run db:migrate`

#### テスト関連エラー

1. **データベース制約違反**: ファクトリーでランダム値を使用し、テスト間でデータを分離
2. **テストデータ残存**: `TestDataCleaner.cleanByPrefix('test')`で適切にクリーンアップ
3. **関連データ不足**: ファクトリーの自動生成機能を活用し、必要な関連データを確保
4. **権限エラー**: `scenarios.setupPermissionTest()`を使用し、適切な権限設定を構築

## 開発ガイドライン

### コーディング規約
- **TypeScript**: strict mode を使用し、型安全性を重視
- **関数型プログラミング**: 可能な限り純粋関数とimmutableなデータ構造を使用
- **命名規則**: 意図が明確に伝わる変数名・関数名を使用
- **コメント**: コードで表現できない「なぜ」を説明する
- **単一責任の原則**: 1つの関数・コンポーネントは1つの責任のみ持つ

### アーキテクチャガイドライン
- **ディレクトリ構造**: 機能ごとにファイルを整理
- **コンポーネント設計**: 再利用可能で、疎結合なコンポーネントを作成
- **状態管理**: 必要最小限の状態管理を心がける
- **API設計**: RESTfulなAPI設計を基本とする
- **エラーハンドリング**: 適切なエラー処理とユーザーへの分かりやすいメッセージ

### 継続的改善ルール（重要）
- **ユーザーフィードバック活用**: ユーザーから指摘されたコーディングの改善点は、必ずこのbasic-rule.mdcに追記する
- **知識の蓄積**: 発見した重要な開発指針やベストプラクティスをドキュメント化する
- **ルールの更新**: プロジェクトの成長に合わせて開発ルールを継続的に見直し・更新する
- **学習の共有**: チーム全体で学んだ教訓を共有し、同じ過ちを繰り返さない
- **定期的な振り返り**: コードレビューや開発プロセスの改善点を定期的に議論する

### パフォーマンス・セキュリティ
- **パフォーマンス**: 不必要な再レンダリングや重い処理を避ける
- **セキュリティ**: 入力値の検証、SQLインジェクション対策、XSS対策を徹底
- **アクセシビリティ**: WCAG 2.1 AAレベルを目指したアクセシブルな実装
- **SEO**: 適切なメタタグとセマンティックなHTML構造

### コードレビュー指針
- **建設的なフィードバック**: 改善提案は具体的で実行可能な内容にする
- **学習機会**: レビューを通じてチーム全体のスキル向上を図る
- **品質基準**: 機能性だけでなく、保守性・可読性・テスタビリティも評価する
- **知識共有**: 良いコードパターンや設計判断の理由を共有する